/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-02-22 05:08:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signUp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/icia.semiproject/semiProject/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/drawAcademy/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1708260482529L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"resources/css/signup.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"\r\n");
      out.write("	integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\"\r\n");
      out.write("	crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	$(function() {\r\n");
      out.write("		let msg = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${msg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("		if(msg != \"\"){\r\n");
      out.write("			alert(msg);\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("   <div class=\"logo-home\">\r\n");
      out.write("      <button class=\"Home-btn\" onclick=\"location.href='./'\">\r\n");
      out.write("         <img src=\"resources/images/lg.png\" class=\"logo\">\r\n");
      out.write("      </button>\r\n");
      out.write("   </div>\r\n");
      out.write("   <form action=\"signUpProc\" method=\"post\" enctype=\"multipart/form-data\"\r\n");
      out.write("     onsubmit=\"return validateForm()\" class=\"joinForm\">\r\n");
      out.write("      <h2>SIGN UP</h2>\r\n");
      out.write("      <div class=\"textForm\">\r\n");
      out.write("         <input type=\"text\" class=\"id\" name=\"m_email\" placeholder=\"E-mail\" id=\"signUpEmail\">\r\n");
      out.write("      <span id=\"emailCheckResult\"></span>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"textForm\">\r\n");
      out.write("         <input type=\"text\" class=\"pw\" name=\"m_password\" placeholder=\"Password\">\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"textForm\">\r\n");
      out.write("         <input type=\"text\" class=\"name\" name=\"m_name\" placeholder=\"Name\">\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"textForm\">\r\n");
      out.write("         <input type=\"text\" class=\"phoneNumber\" name=\"m_phoneNumber\" placeholder=\"Phone number\">\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"textForm\">\r\n");
      out.write("         <input type=\"text\" class=\"address\" name=\"m_address\" placeholder=\"Address\">\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"textForm\">\r\n");
      out.write("         <input type=\"text\" class=\"age\" name=\"m_age\" placeholder=\"Age\">\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class =\"textForm\">\r\n");
      out.write("             <select id=\"selectOption\" name=\"sORt\">\r\n");
      out.write("              <option value=\"student\">학생</option>\r\n");
      out.write("              <option value=\"teacher\">선생님</option>\r\n");
      out.write("          </select>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <button type=\"submit\">\r\n");
      out.write("         <span></span>\r\n");
      out.write("         <span></span>\r\n");
      out.write("         <span></span>\r\n");
      out.write("         <span></span>\r\n");
      out.write("         SIGN UP\r\n");
      out.write("      </button>\r\n");
      out.write("   </form>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("function validateForm() {\r\n");
      out.write("    // 이메일 중복 체크 결과를 가져옴\r\n");
      out.write("    let result = $(\"#emailCheckResult\").text();\r\n");
      out.write("\r\n");
      out.write("    // 중복된 경우\r\n");
      out.write("    if (result === \"중복된 이메일입니다.\") {\r\n");
      out.write("        alert(\"중복된 이메일입니다. 다른 이메일을 입력해주세요.\");\r\n");
      out.write("        return false; // 회원가입 막기\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // 사용 가능한 경우\r\n");
      out.write("    return true; // 회원가입 허용\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("    // 문서가 준비되면 실행되는 함수\r\n");
      out.write("    $(\"#signUpEmail\").blur(function() {\r\n");
      out.write("        // 'signUpEamil'이라는 ID를 가진 입력 필드에서 blur 이벤트가 발생했을 때 실행되는 함수\r\n");
      out.write("        let email = $(this).val();\r\n");
      out.write("        // 'signUpEamil' 필드의 값(value)을 가져와서 'email' 변수에 저장\r\n");
      out.write("        if (email.trim() === \"\") {\r\n");
      out.write("            $(\"#emailCheckResult\").text(\"이메일을 입력해주세요.\");\r\n");
      out.write("            return;\r\n");
      out.write("        }else if (email.indexOf('@') === -1) {\r\n");
      out.write("        	//indexOf(\"\")는 문자열이 포함되지 안흥면 무조건 -1값이 반환됨.\r\n");
      out.write("            $(\"#emailCheckResult\").text(\"올바르지 않은 이메일입니다.\")\r\n");
      out.write("        } \r\n");
      out.write("        $.post(\"emailCheckResult\", { m_email: email }, function(result) {\r\n");
      out.write("            // 서버로 POST 요청을 보내는데, 요청 경로는 \"emailCheckResult\"이고, 데이터로 'm_email'을 키로 하는 'email' 값을 전송\r\n");
      out.write("            // 성공적으로 요청이 완료되면 실행되는 함수, 서버에서 반환한 결과가 'result' 매개변수로 전달됨\r\n");
      out.write("            $(\"#emailCheckResult\").text(result);\r\n");
      out.write("            // 'emailCheckResult'라는 ID를 가진 요소에 서버에서 받은 결과를 텍스트로 설정하여 표시	  \r\n");
      out.write("      		  	});\r\n");
      out.write("        	\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
